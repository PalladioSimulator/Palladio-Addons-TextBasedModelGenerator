/*
 * generated by Xtext 2.22.0
 */
package com.palladiosimulator.textual.repository.serializer;

import com.google.inject.Inject;
import com.palladiosimulator.textual.repository.repoLang.Component;
import com.palladiosimulator.textual.repository.repoLang.CompositeComponent;
import com.palladiosimulator.textual.repository.repoLang.ImportedRepository;
import com.palladiosimulator.textual.repository.repoLang.Interface;
import com.palladiosimulator.textual.repository.repoLang.PassiveResource;
import com.palladiosimulator.textual.repository.repoLang.RepoLangPackage;
import com.palladiosimulator.textual.repository.repoLang.Repository;
import com.palladiosimulator.textual.repository.repoLang.RoleSpecification;
import com.palladiosimulator.textual.repository.repoLang.Seff;
import com.palladiosimulator.textual.repository.repoLang.SeffAcquireAction;
import com.palladiosimulator.textual.repository.repoLang.SeffCallParameter;
import com.palladiosimulator.textual.repository.repoLang.SeffExternalCallAction;
import com.palladiosimulator.textual.repository.repoLang.SeffFork;
import com.palladiosimulator.textual.repository.repoLang.SeffForkAction;
import com.palladiosimulator.textual.repository.repoLang.SeffGuardedBranch;
import com.palladiosimulator.textual.repository.repoLang.SeffGuardedBranchAction;
import com.palladiosimulator.textual.repository.repoLang.SeffInternalAction;
import com.palladiosimulator.textual.repository.repoLang.SeffLoopAction;
import com.palladiosimulator.textual.repository.repoLang.SeffProbabilisticBranch;
import com.palladiosimulator.textual.repository.repoLang.SeffProbabilisticBranchAction;
import com.palladiosimulator.textual.repository.repoLang.SeffReferenceParameter;
import com.palladiosimulator.textual.repository.repoLang.SeffReleaseAction;
import com.palladiosimulator.textual.repository.repoLang.SeffReturnParameter;
import com.palladiosimulator.textual.repository.repoLang.SeffSetReturnAction;
import com.palladiosimulator.textual.repository.repoLang.SeffSetVariableAction;
import com.palladiosimulator.textual.repository.repoLang.SeffVariableChar;
import com.palladiosimulator.textual.repository.repoLang.Signature;
import com.palladiosimulator.textual.repository.repoLang.SignatureParameter;
import com.palladiosimulator.textual.repository.repoLang.SubSeff;
import com.palladiosimulator.textual.repository.services.RepoLangGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.palladiosimulator.pcm.core.entity.EntityPackage;
import org.palladiosimulator.pcm.repository.CollectionDataType;
import org.palladiosimulator.pcm.repository.CompositeDataType;
import org.palladiosimulator.pcm.repository.InnerDeclaration;
import org.palladiosimulator.pcm.repository.RepositoryPackage;

@SuppressWarnings("all")
public class RepoLangSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RepoLangGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RepoLangPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RepoLangPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case RepoLangPackage.COMPOSITE_COMPONENT:
				sequence_CompositeComponent(context, (CompositeComponent) semanticObject); 
				return; 
			case RepoLangPackage.IMPORTED_REPOSITORY:
				sequence_ImportedRepository(context, (ImportedRepository) semanticObject); 
				return; 
			case RepoLangPackage.INTERFACE:
				sequence_Interface(context, (Interface) semanticObject); 
				return; 
			case RepoLangPackage.PASSIVE_RESOURCE:
				sequence_PassiveResource(context, (PassiveResource) semanticObject); 
				return; 
			case RepoLangPackage.REPOSITORY:
				sequence_Repository(context, (Repository) semanticObject); 
				return; 
			case RepoLangPackage.ROLE_SPECIFICATION:
				sequence_RoleSpecification(context, (RoleSpecification) semanticObject); 
				return; 
			case RepoLangPackage.SEFF:
				sequence_Seff(context, (Seff) semanticObject); 
				return; 
			case RepoLangPackage.SEFF_ACQUIRE_ACTION:
				sequence_SeffAcquireAction(context, (SeffAcquireAction) semanticObject); 
				return; 
			case RepoLangPackage.SEFF_CALL_PARAMETER:
				sequence_SeffCallParameter(context, (SeffCallParameter) semanticObject); 
				return; 
			case RepoLangPackage.SEFF_EXTERNAL_CALL_ACTION:
				sequence_SeffExternalCallAction(context, (SeffExternalCallAction) semanticObject); 
				return; 
			case RepoLangPackage.SEFF_FORK:
				sequence_SeffFork(context, (SeffFork) semanticObject); 
				return; 
			case RepoLangPackage.SEFF_FORK_ACTION:
				sequence_SeffForkAction(context, (SeffForkAction) semanticObject); 
				return; 
			case RepoLangPackage.SEFF_GUARDED_BRANCH:
				sequence_SeffGuardedBranch(context, (SeffGuardedBranch) semanticObject); 
				return; 
			case RepoLangPackage.SEFF_GUARDED_BRANCH_ACTION:
				sequence_SeffGuardedBranchAction(context, (SeffGuardedBranchAction) semanticObject); 
				return; 
			case RepoLangPackage.SEFF_INTERNAL_ACTION:
				sequence_SeffInternalAction(context, (SeffInternalAction) semanticObject); 
				return; 
			case RepoLangPackage.SEFF_LOOP_ACTION:
				sequence_SeffLoopAction(context, (SeffLoopAction) semanticObject); 
				return; 
			case RepoLangPackage.SEFF_PROBABILISTIC_BRANCH:
				sequence_SeffProbabilisticBranch(context, (SeffProbabilisticBranch) semanticObject); 
				return; 
			case RepoLangPackage.SEFF_PROBABILISTIC_BRANCH_ACTION:
				sequence_SeffProbabilisticBranchAction(context, (SeffProbabilisticBranchAction) semanticObject); 
				return; 
			case RepoLangPackage.SEFF_REFERENCE_PARAMETER:
				sequence_SeffReferenceParameter(context, (SeffReferenceParameter) semanticObject); 
				return; 
			case RepoLangPackage.SEFF_RELEASE_ACTION:
				sequence_SeffReleaseAction(context, (SeffReleaseAction) semanticObject); 
				return; 
			case RepoLangPackage.SEFF_RETURN_PARAMETER:
				sequence_SeffReturnParameter(context, (SeffReturnParameter) semanticObject); 
				return; 
			case RepoLangPackage.SEFF_SET_RETURN_ACTION:
				sequence_SeffSetReturnAction(context, (SeffSetReturnAction) semanticObject); 
				return; 
			case RepoLangPackage.SEFF_SET_VARIABLE_ACTION:
				sequence_SeffSetVariableAction(context, (SeffSetVariableAction) semanticObject); 
				return; 
			case RepoLangPackage.SEFF_VARIABLE_CHAR:
				sequence_SeffVariableChar(context, (SeffVariableChar) semanticObject); 
				return; 
			case RepoLangPackage.SIGNATURE:
				sequence_Signature(context, (Signature) semanticObject); 
				return; 
			case RepoLangPackage.SIGNATURE_PARAMETER:
				sequence_SignatureParameter(context, (SignatureParameter) semanticObject); 
				return; 
			case RepoLangPackage.SUB_SEFF:
				sequence_SubSeff(context, (SubSeff) semanticObject); 
				return; 
			}
		else if (epackage == RepositoryPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RepositoryPackage.COLLECTION_DATA_TYPE:
				sequence_CustomCollectionType(context, (CollectionDataType) semanticObject); 
				return; 
			case RepositoryPackage.COMPOSITE_DATA_TYPE:
				sequence_CustomCompositeType(context, (CompositeDataType) semanticObject); 
				return; 
			case RepositoryPackage.INNER_DECLARATION:
				sequence_CustomInnerDeclaration(context, (InnerDeclaration) semanticObject); 
				return; 
			case RepositoryPackage.REPOSITORY:
				sequence_TypeRepo(context, (org.palladiosimulator.pcm.repository.Repository) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     NamedElement returns Component
	 *     Component returns Component
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (provides+=RoleSpecification provides+=RoleSpecification*)? 
	 *         (requires+=RoleSpecification requires+=RoleSpecification*)? 
	 *         seffs+=Seff* 
	 *         passiveResources+=PassiveResource*
	 *     )
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CompositeComponent returns CompositeComponent
	 *
	 * Constraint:
	 *     (name=ID provides+=RoleSpecification* requires+=RoleSpecification* components+=[Component|ID]*)
	 */
	protected void sequence_CompositeComponent(ISerializationContext context, CompositeComponent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CustomType returns CollectionDataType
	 *     CustomCollectionType returns CollectionDataType
	 *
	 * Constraint:
	 *     (entityName=ID innerType_CollectionDataType=[DataType|FQN])
	 */
	protected void sequence_CustomCollectionType(ISerializationContext context, CollectionDataType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, EntityPackage.Literals.NAMED_ELEMENT__ENTITY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, EntityPackage.Literals.NAMED_ELEMENT__ENTITY_NAME));
			if (transientValues.isValueTransient((EObject) semanticObject, RepositoryPackage.Literals.COLLECTION_DATA_TYPE__INNER_TYPE_COLLECTION_DATA_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, RepositoryPackage.Literals.COLLECTION_DATA_TYPE__INNER_TYPE_COLLECTION_DATA_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getCustomCollectionTypeAccess().getEntityNameIDTerminalRuleCall_1_0(), semanticObject.getEntityName());
		feeder.accept(grammarAccess.getCustomCollectionTypeAccess().getInnerType_CollectionDataTypeDataTypeFQNParserRuleCall_3_0_1(), semanticObject.eGet(RepositoryPackage.Literals.COLLECTION_DATA_TYPE__INNER_TYPE_COLLECTION_DATA_TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CustomType returns CompositeDataType
	 *     CustomCompositeType returns CompositeDataType
	 *
	 * Constraint:
	 *     (entityName=ID parentType_CompositeDataType+=[CompositeDataType|FQN]? innerDeclaration_CompositeDataType+=CustomInnerDeclaration*)
	 */
	protected void sequence_CustomCompositeType(ISerializationContext context, CompositeDataType semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CustomInnerDeclaration returns InnerDeclaration
	 *
	 * Constraint:
	 *     (entityName=ID datatype_InnerDeclaration=[DataType|FQN])
	 */
	protected void sequence_CustomInnerDeclaration(ISerializationContext context, InnerDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient((EObject) semanticObject, EntityPackage.Literals.NAMED_ELEMENT__ENTITY_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, EntityPackage.Literals.NAMED_ELEMENT__ENTITY_NAME));
			if (transientValues.isValueTransient((EObject) semanticObject, RepositoryPackage.Literals.INNER_DECLARATION__DATATYPE_INNER_DECLARATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing((EObject) semanticObject, RepositoryPackage.Literals.INNER_DECLARATION__DATATYPE_INNER_DECLARATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, (EObject) semanticObject);
		feeder.accept(grammarAccess.getCustomInnerDeclarationAccess().getEntityNameIDTerminalRuleCall_0_0(), semanticObject.getEntityName());
		feeder.accept(grammarAccess.getCustomInnerDeclarationAccess().getDatatype_InnerDeclarationDataTypeFQNParserRuleCall_2_0_1(), semanticObject.eGet(RepositoryPackage.Literals.INNER_DECLARATION__DATATYPE_INNER_DECLARATION, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ImportedRepository returns ImportedRepository
	 *
	 * Constraint:
	 *     importedNamespace=QualifiedNameWithWildcard
	 */
	protected void sequence_ImportedRepository(ISerializationContext context, ImportedRepository semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RepoLangPackage.Literals.IMPORTED_REPOSITORY__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RepoLangPackage.Literals.IMPORTED_REPOSITORY__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getImportedRepositoryAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NamedElement returns Interface
	 *     Interface returns Interface
	 *
	 * Constraint:
	 *     (name=ID signature+=Signature*)
	 */
	protected void sequence_Interface(ISerializationContext context, Interface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PassiveResource returns PassiveResource
	 *
	 * Constraint:
	 *     (name=ID capacity=INT)
	 */
	protected void sequence_PassiveResource(ISerializationContext context, PassiveResource semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RepoLangPackage.Literals.PASSIVE_RESOURCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RepoLangPackage.Literals.PASSIVE_RESOURCE__NAME));
			if (transientValues.isValueTransient(semanticObject, RepoLangPackage.Literals.PASSIVE_RESOURCE__CAPACITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RepoLangPackage.Literals.PASSIVE_RESOURCE__CAPACITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPassiveResourceAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPassiveResourceAccess().getCapacityINTTerminalRuleCall_3_0(), semanticObject.getCapacity());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Repository returns Repository
	 *
	 * Constraint:
	 *     (name=ID imports+=ImportedRepository* types=TypeRepo? elements+=NamedElement*)
	 */
	protected void sequence_Repository(ISerializationContext context, Repository semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RoleSpecification returns RoleSpecification
	 *
	 * Constraint:
	 *     (interface=[Interface|ID] name=ID)
	 */
	protected void sequence_RoleSpecification(ISerializationContext context, RoleSpecification semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RepoLangPackage.Literals.ROLE_SPECIFICATION__INTERFACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RepoLangPackage.Literals.ROLE_SPECIFICATION__INTERFACE));
			if (transientValues.isValueTransient(semanticObject, RepoLangPackage.Literals.ROLE_SPECIFICATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RepoLangPackage.Literals.ROLE_SPECIFICATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRoleSpecificationAccess().getInterfaceInterfaceIDTerminalRuleCall_0_0_1(), semanticObject.eGet(RepoLangPackage.Literals.ROLE_SPECIFICATION__INTERFACE, false));
		feeder.accept(grammarAccess.getRoleSpecificationAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SeffAction returns SeffAcquireAction
	 *     SeffAcquireAction returns SeffAcquireAction
	 *
	 * Constraint:
	 *     (name=ID? resource=[PassiveResource|ID] amount=INT?)
	 */
	protected void sequence_SeffAcquireAction(ISerializationContext context, SeffAcquireAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SeffCallParameter returns SeffCallParameter
	 *
	 * Constraint:
	 *     ((parameter=[SignatureParameter|ID] | referenceName=STRING) values+=SeffVariableChar+)
	 */
	protected void sequence_SeffCallParameter(ISerializationContext context, SeffCallParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SeffAction returns SeffExternalCallAction
	 *     SeffExternalCallAction returns SeffExternalCallAction
	 *
	 * Constraint:
	 *     (name=ID? role=[RoleSpecification|ID]? called=[Signature|FQN] (bindings+=SeffCallParameter+ returning+=SeffReferenceParameter*)?)
	 */
	protected void sequence_SeffExternalCallAction(ISerializationContext context, SeffExternalCallAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SeffAction returns SeffForkAction
	 *     SeffForkAction returns SeffForkAction
	 *
	 * Constraint:
	 *     (sync?='SYNC'? name=ID? forks+=SeffFork forks+=SeffFork*)
	 */
	protected void sequence_SeffForkAction(ISerializationContext context, SeffForkAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SeffFork returns SeffFork
	 *
	 * Constraint:
	 *     (name=ID? seff=SubSeff)
	 */
	protected void sequence_SeffFork(ISerializationContext context, SeffFork semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SeffAction returns SeffGuardedBranchAction
	 *     SeffGuardedBranchAction returns SeffGuardedBranchAction
	 *
	 * Constraint:
	 *     (name=ID? branches+=SeffGuardedBranch+)
	 */
	protected void sequence_SeffGuardedBranchAction(ISerializationContext context, SeffGuardedBranchAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SeffBranch returns SeffGuardedBranch
	 *     SeffGuardedBranch returns SeffGuardedBranch
	 *
	 * Constraint:
	 *     (condition=STRING name=ID? seff=SubSeff)
	 */
	protected void sequence_SeffGuardedBranch(ISerializationContext context, SeffGuardedBranch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SeffAction returns SeffInternalAction
	 *     SeffInternalAction returns SeffInternalAction
	 *
	 * Constraint:
	 *     (name=ID? demandType=[ProcessingResourceType|ID] demand=STRING)
	 */
	protected void sequence_SeffInternalAction(ISerializationContext context, SeffInternalAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SeffAction returns SeffLoopAction
	 *     SeffLoopAction returns SeffLoopAction
	 *
	 * Constraint:
	 *     (name=ID? count=STRING actions=SubSeff)
	 */
	protected void sequence_SeffLoopAction(ISerializationContext context, SeffLoopAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SeffAction returns SeffProbabilisticBranchAction
	 *     SeffProbabilisticBranchAction returns SeffProbabilisticBranchAction
	 *
	 * Constraint:
	 *     (name=ID? branches+=SeffProbabilisticBranch+)
	 */
	protected void sequence_SeffProbabilisticBranchAction(ISerializationContext context, SeffProbabilisticBranchAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SeffBranch returns SeffProbabilisticBranch
	 *     SeffProbabilisticBranch returns SeffProbabilisticBranch
	 *
	 * Constraint:
	 *     (probability=Probability name=ID? seff=SubSeff)
	 */
	protected void sequence_SeffProbabilisticBranch(ISerializationContext context, SeffProbabilisticBranch semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SeffReferenceParameter returns SeffReferenceParameter
	 *
	 * Constraint:
	 *     (referenceName=STRING values+=SeffVariableChar+)
	 */
	protected void sequence_SeffReferenceParameter(ISerializationContext context, SeffReferenceParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SeffAction returns SeffReleaseAction
	 *     SeffReleaseAction returns SeffReleaseAction
	 *
	 * Constraint:
	 *     (name=ID? resource=[PassiveResource|ID] amount=INT?)
	 */
	protected void sequence_SeffReleaseAction(ISerializationContext context, SeffReleaseAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SeffReturnParameter returns SeffReturnParameter
	 *
	 * Constraint:
	 *     values+=SeffVariableChar+
	 */
	protected void sequence_SeffReturnParameter(ISerializationContext context, SeffReturnParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SeffAction returns SeffSetReturnAction
	 *     SeffSetReturnAction returns SeffSetReturnAction
	 *
	 * Constraint:
	 *     (name=ID? returnValue=SeffReturnParameter)
	 */
	protected void sequence_SeffSetReturnAction(ISerializationContext context, SeffSetReturnAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SeffAction returns SeffSetVariableAction
	 *     SeffSetVariableAction returns SeffSetVariableAction
	 *
	 * Constraint:
	 *     (name=ID? setValues+=SeffReferenceParameter+)
	 */
	protected void sequence_SeffSetVariableAction(ISerializationContext context, SeffSetVariableAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SeffVariableChar returns SeffVariableChar
	 *
	 * Constraint:
	 *     (characterisationType=CharType value=STRING)
	 */
	protected void sequence_SeffVariableChar(ISerializationContext context, SeffVariableChar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RepoLangPackage.Literals.SEFF_VARIABLE_CHAR__CHARACTERISATION_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RepoLangPackage.Literals.SEFF_VARIABLE_CHAR__CHARACTERISATION_TYPE));
			if (transientValues.isValueTransient(semanticObject, RepoLangPackage.Literals.SEFF_VARIABLE_CHAR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RepoLangPackage.Literals.SEFF_VARIABLE_CHAR__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSeffVariableCharAccess().getCharacterisationTypeCharTypeEnumRuleCall_0_0(), semanticObject.getCharacterisationType());
		feeder.accept(grammarAccess.getSeffVariableCharAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Seff returns Seff
	 *
	 * Constraint:
	 *     (name=ID? role=[RoleSpecification|ID] signature=[Signature|FQN] actions+=SeffAction*)
	 */
	protected void sequence_Seff(ISerializationContext context, Seff semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SignatureParameter returns SignatureParameter
	 *
	 * Constraint:
	 *     (name=ID type=[DataType|FQN])
	 */
	protected void sequence_SignatureParameter(ISerializationContext context, SignatureParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RepoLangPackage.Literals.SIGNATURE_PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RepoLangPackage.Literals.SIGNATURE_PARAMETER__NAME));
			if (transientValues.isValueTransient(semanticObject, RepoLangPackage.Literals.SIGNATURE_PARAMETER__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RepoLangPackage.Literals.SIGNATURE_PARAMETER__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSignatureParameterAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSignatureParameterAccess().getTypeDataTypeFQNParserRuleCall_2_0_1(), semanticObject.eGet(RepoLangPackage.Literals.SIGNATURE_PARAMETER__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Signature returns Signature
	 *
	 * Constraint:
	 *     (name=ID (parameters+=SignatureParameter parameters+=SignatureParameter*)?)
	 */
	protected void sequence_Signature(ISerializationContext context, Signature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SubSeff returns SubSeff
	 *
	 * Constraint:
	 *     actions+=SeffAction+
	 */
	protected void sequence_SubSeff(ISerializationContext context, SubSeff semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypeRepo returns Repository
	 *
	 * Constraint:
	 *     dataTypes__Repository+=CustomType+
	 */
	protected void sequence_TypeRepo(ISerializationContext context, org.palladiosimulator.pcm.repository.Repository semanticObject) {
		genericSequencer.createSequence(context, (EObject) semanticObject);
	}
	
	
}

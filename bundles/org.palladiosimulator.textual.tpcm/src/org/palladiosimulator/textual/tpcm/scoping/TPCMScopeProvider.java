/*
 * generated by Xtext 2.21.0
 */
package org.palladiosimulator.textual.tpcm.scoping;

import java.util.Collections;
import java.util.Optional;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.FilteringScope;
import org.palladiosimulator.textual.tpcm.language.DomainInterfaceProvidedRole;
import org.palladiosimulator.textual.tpcm.language.EntryLevelSystemCallAction;
import org.palladiosimulator.textual.tpcm.language.Interface;
import org.palladiosimulator.textual.tpcm.language.InternalInterfaceProvidedRole;
import org.palladiosimulator.textual.tpcm.language.LanguagePackage;
import org.palladiosimulator.textual.tpcm.language.InterfaceRequiredRole;
import org.palladiosimulator.textual.tpcm.language.Role;
import org.palladiosimulator.textual.tpcm.language.SEFF;
import org.palladiosimulator.textual.tpcm.language.SEFFCallAction;
import org.palladiosimulator.textual.tpcm.language.Signature;

/**
 * This class contains custom scoping description.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class TPCMScopeProvider extends AbstractTPCMScopeProvider {

	@Override
	public IScope getScope(EObject context, EReference reference) {
		if (context instanceof SEFF && reference == LanguagePackage.Literals.SEFF__SIGNATUR) {
			return Scopes.scopeFor(getSignaturesOfInterfaceForRole(((SEFF) context).getRole()));
		} else if (context instanceof SEFFCallAction
				&& reference == LanguagePackage.Literals.SEFF_CALL_ACTION__SIGNATURE) {
			return Scopes.scopeFor(getSignaturesOfInterfaceForRole(((SEFFCallAction) context).getRole()));
		} else if (context instanceof EntryLevelSystemCallAction
				&& reference == LanguagePackage.Literals.ENTRY_LEVEL_SYSTEM_CALL_ACTION__SIGNATURE) {
			return Scopes.scopeFor(getSignaturesOfInterfaceForRole(((EntryLevelSystemCallAction) context).getRole()));
		} else if (context instanceof DomainInterfaceProvidedRole && reference == LanguagePackage.Literals.ROLE__TYPE) {
			return new FilteringScope(super.getScope(context, reference),
					ref -> ref.getEClass() == LanguagePackage.Literals.DOMAIN_INTERFACE);
		} else if (context instanceof InterfaceRequiredRole && reference == LanguagePackage.Literals.ROLE__TYPE) {
			return new FilteringScope(super.getScope(context, reference),
					ref -> ref.getEClass() == LanguagePackage.Literals.RESOURCE_INTERFACE
							|| ref.getEClass() == LanguagePackage.Literals.DOMAIN_INTERFACE);
		} else if (context instanceof InternalInterfaceProvidedRole
				&& reference == LanguagePackage.Literals.ROLE__TYPE) {
			return new FilteringScope(super.getScope(context, reference),
					ref -> ref.getEClass() == LanguagePackage.Literals.INTERNAL_INTERFACE);
		}
		return super.getScope(context, reference);
	}

	protected Iterable<Signature> getSignaturesOfInterfaceForRole(Role role) {
		return () -> Optional.of(role).map(Role::getType).map(Interface::getContents)
				.map(c -> c.stream().filter(Signature.class::isInstance).map(Signature.class::cast).iterator())
				.orElseGet(() -> Collections.emptyIterator());
	}
}

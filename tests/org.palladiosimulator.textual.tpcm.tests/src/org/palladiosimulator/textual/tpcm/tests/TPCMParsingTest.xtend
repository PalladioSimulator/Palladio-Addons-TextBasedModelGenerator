/*
 * generated by Xtext 2.21.0
 */
package org.palladiosimulator.textual.tpcm.tests

import com.google.inject.Inject
import com.google.inject.Provider
import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import java.util.stream.Stream
import org.eclipse.emf.common.util.URI
import org.eclipse.xtext.resource.XtextResourceSet
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.DynamicTest
import org.junit.jupiter.api.TestFactory
import org.junit.jupiter.api.^extension.ExtendWith
import org.junit.jupiter.api.function.Executable

import static org.junit.jupiter.api.DynamicTest.dynamicTest

@ExtendWith(InjectionExtension)
@InjectWith(TPCMInjectorProvider)
class TPCMParsingTest {
    @Inject
    Provider<XtextResourceSet> resourceSetProvider;

    @TestFactory
    def Stream<DynamicTest> checkAllTPCMParserTestFiles() {
        return Files.walk(Paths.get("test-resources/parser"), 1).filter([it.toString().endsWith(".tpcm")]).map([ path |
            dynamicTest("> " + path.getFileName(), path.toUri(), // test source uri
            [|testParser(path)] as Executable)
        ]);
    }

    def testParser(Path path) throws Exception {
        val rs = resourceSetProvider.get
        val r = rs.getResource(URI.createURI(path.toUri.toString), true);
        r.load(null);
        Assertions.assertEquals(r.contents.length, 1, "Unexpected number of root elements.")
        val result = r.contents.get(0)
        Assertions.assertNotNull(result)
        val errors = r.errors
        Assertions.assertTrue(errors.isEmpty, '''Unexpected errors in «path.toString»: «errors.join(", ")»''')
    }
}
